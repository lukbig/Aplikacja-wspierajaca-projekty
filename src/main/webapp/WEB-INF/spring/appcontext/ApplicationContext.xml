<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
       http://www.springframework.org/schema/data/jpa
       http://www.springframework.org/schema/data/jpa/spring-jpa-1.8.xsd">

    <context:component-scan base-package="com.bigos"/>
    <context:property-placeholder location = "classpath:/settings.properties"/>

    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <constructor-arg name="username" value="${user}"/>
        <constructor-arg name="password" value="${password}"/>
        <constructor-arg name="url" value="${url}"/>
        <property name="driverClassName" value="${driver}"/>
    </bean>

    <bean id="emf" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="packagesToScan" value="com.bigos.awp.domain" />
        <property name="dataSource" ref="dataSource" />
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.hbm2ddl.auto">${hbm2ddl.auto}</prop>
                <prop key="hibernate.dialect">${dialect}</prop>
                <!--f you have any lazy-loading proxies your should replace them either with nulls or with real objects
                before returning from @Transactional context. The Set or List that is lazy loaded is replaced by the
                Hibernate with the proxy. The proxy would load the collection first time it is accessed. But what if
                it is first accessed if you are outside the transactional context? The hibernate session that is referenced
                by the proxy doesn't exist so you have the error. Property above solves the problem.-->
                <prop key="hibernate.enable_lazy_load_no_trans">true</prop>
            </props>
        </property>
        <property name="persistenceProvider">
            <bean class="org.hibernate.jpa.HibernatePersistenceProvider" />
        </property>
    </bean>

    <bean class="org.springframework.orm.jpa.JpaTransactionManager" id="tm">
        <property name="dataSource" ref="dataSource" />
        <property name="entityManagerFactory" ref="emf" />
    </bean>

    <!-- It scans all beans in the application context and creates AOP interceptor for those which are annotated.
    This is done via the SpringTransactionAnnotationParser, which is used by TransactionInterceptor
     - the a for mentioned interceptor. Then whenever these beans are accessed, this advice is triggered and
     a transaction is started before the target method is executed, and committed after the execution.-->
    <tx:annotation-driven />

    <jpa:repositories base-package="com.bigos.awp.domain.repository"
                      entity-manager-factory-ref="emf"
                      transaction-manager-ref="tm" />

    <!--bcrypt-->
    <bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
        <constructor-arg value="12"/>
    </bean>

    <!--Validations-->
    <!--<mvc:annotation-driven enable-matrix-variables="true" validator="localValidatorFactoryBean"/>-->

    <!--&lt;!&ndash;messages&ndash;&gt;-->
    <!--<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">-->
        <!--<property name="basename" value="messages"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash;validations&ndash;&gt;-->
    <!--<bean id="localValidatorFactoryBean" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">-->
        <!--<property name="validationMessageSource" ref="messageSource"/>-->
    <!--</bean>-->

</beans>